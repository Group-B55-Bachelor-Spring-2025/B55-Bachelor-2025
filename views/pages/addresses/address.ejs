<div class="flex justify-between items-center my-8">
  <h1 class="text-3xl capitalize"><%= address.name %></h1>
  <button id="showAddressModal" class="bg-teal-700 rounded p-2 text-white cursor-pointer" onclick="document.getElementById('createDeviceGroupModal').classList.remove('hidden')">New Device Group</button>
</div>
<h6 class="mb-4 text-lg font-medium text-gray-800">Device Groups</h6>

<div class="flex flex-col space-y-4">
  <div class="bg-white rounded-lg shadow overflow-hidden">
    <div class="p-0">
      <div class="overflow-x-auto">
        <% if (deviceGroups && deviceGroups.length > 0) { %>
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Devices</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created At</th>
                <th scope="col" class="relative px-6 py-3">
                  <span class="sr-only">View</span>
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              <% deviceGroups.forEach(deviceGroup => { %>
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="flex-shrink-0">
                        <h6 class="text-sm font-medium text-gray-900"><%= deviceGroup.name %></h6>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <p class="text-sm text-gray-500"><%= deviceGroup.devices ? deviceGroup.devices.length : 0 %> devices</p>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class="text-sm text-gray-500">
                      <%= new Date(deviceGroup.createdAt).toLocaleDateString() %>
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <a href="/device-groups/<%= deviceGroup.id %>" class="text-blue-600 hover:text-blue-900">
                      View
                    </a>
                  </td>
                </tr>
              <% }) %>
            </tbody>
          </table>
        <% } else { %>
          <div class="text-center py-8">
            <p class="text-gray-500 text-sm mb-2">No device groups found for this address.</p>
            <p class="text-gray-500 text-sm">Create a new device group to get started.</p>
          </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- Create Device Group Modal -->
<div id="createDeviceGroupModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg overflow-hidden shadow-xl transform transition-all max-w-lg w-full">
    <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
      <div class="flex justify-between items-center pb-3 border-b border-gray-200 mb-4">
        <h5 class="text-lg font-medium text-gray-900">Create New Device Group</h5>
        <button type="button" class="text-gray-400 hover:text-gray-500 cursor-pointer" onclick="hideModal('createDeviceGroupModal')">
          <span class="sr-only">Close</span>
          <span class="text-2xl">&times;</span>
        </button>
      </div>
      <form action="/api/device-groups" method="POST">
        <div class="mb-4">
          <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
          <input type="text" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" id="name" name="name" required>
        </div>
        <input type="hidden" name="addressId" value="<%= address ? address.id : addressId %>">
        <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
          <button type="button" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 cursor-pointer"
            onclick="hideModal('createDeviceGroupModal')">
            Cancel
          </button>
          <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer">
            Create
          </button>
        </div>
      </form>
    </div>
  </div>
</div>


<script>
  document.addEventListener('DOMContentLoaded', function() {
    const createDeviceGroupModal = document.getElementById('createDeviceGroupModal');
    const showCreateDeviceGroupModalBtn = document.querySelector('[onclick*="createDeviceGroupModal"]');

    if (showCreateDeviceGroupModalBtn) {
      showCreateDeviceGroupModalBtn.addEventListener('click', function() {
        createDeviceGroupModal.classList.remove('hidden');
      });
    }

    const closeCreateDeviceGroupModalBtn = createDeviceGroupModal.querySelector('[onclick*="hidden"]');
    if (closeCreateDeviceGroupModalBtn) {
      closeCreateDeviceGroupModalBtn.addEventListener('click', function() {
        createDeviceGroupModal.classList.add('hidden');
      });
    }

    const form = createDeviceGroupModal.querySelector('form');
    if (form) {
      form.addEventListener('submit', function(event) {
        event.preventDefault();
        const formData = new FormData(form);
        const formObject = {};
        formData.forEach((value, key) => {
          formObject[key] = value;
        });
        formObject.addressId = parseInt(formData.get('addressId'));
        const actionUrl = form.getAttribute('action');
        fetch(actionUrl, {
          method: 'POST',
          body: JSON.stringify(formObject),
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
        })
        .then(response => response.json())
        .then(data => {
          if (data) {
            if(data.error) {
              alert(data.error);
            } else {
              alert('Device group created successfully');
            }
            window.location.reload();
          } else {
            alert('Error creating device group');
          }
        })
        .catch(error => console.error('Error:', error));
      });
    }

    // Show success/error notifications based on URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const success = urlParams.get('success');
    const error = urlParams.get('error');
    
    if (success === 'true') {
      // Display success notification
      showNotification('Device group created successfully', 'success');
    } else if (error) {
      // Display error notification
      showNotification(decodeURIComponent(error), 'error');
    }
    
    // Utility function to show notifications
    function showNotification(message, type) {
      const notification = document.createElement('div');
      
      // Set appropriate styles based on notification type
      const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
      notification.className = `fixed top-4 right-4 ${bgColor} text-white px-4 py-2 rounded-md shadow-lg z-50`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      // Auto-dismiss after 5 seconds
      setTimeout(() => {
        notification.classList.add('opacity-0', 'transition-opacity', 'duration-500');
        setTimeout(() => notification.remove(), 500);
      }, 5000);
    }
  });
</script>